// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  username     String   @unique
  firstName    String?
  lastName     String?
  
  // Google OAuth fields (User Story #8)
  googleId     String?  @unique
  profilePicture String?
  provider     String   @default("google")
  
  // Profile Management fields (User Story #11)
  displayName  String?
  bio          String?
  avatarUrl    String?
  theme        String   @default("dark")
  preferences  String?  // JSON string for user preferences
  
  // Authentication tracking
  lastLogin    DateTime?
  refreshToken String?
  
  // Failed login tracking (User Story #10)
  failedLoginAttempts Int      @default(0)
  lockedUntil         DateTime?
  
  // Relations
  games        Game[]   // User's game library
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("users")
}

// Token blacklist for revoked tokens (User Story #10)
model TokenBlacklist {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int?
  type      String   // 'access' or 'refresh'
  expiresAt DateTime
  reason    String?  // Reason for blacklisting
  createdAt DateTime @default(now())

  @@map("token_blacklist")
}

// Game Library Model (User Story #14)
model Game {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // IGDB Data
  igdbId      Int
  name        String
  summary     String?
  coverUrl    String?
  releaseDate DateTime?
  platforms   String?  // JSON array of platforms
  genres      String?  // JSON array of genres
  developer   String?
  publisher   String?
  rating      Float?   // IGDB rating
  
  // User Data
  status      String   @default("wishlist") // wishlist, playing, completed, on_hold
  userRating  Float?   // User's personal rating (1-5)
  notes       String?  // User's personal notes
  progress    String?  // Playing progress notes
  
  // Timestamps
  addedAt     DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completedAt DateTime?

  @@unique([userId, igdbId]) // Prevent duplicate games per user
  @@map("games")
}
